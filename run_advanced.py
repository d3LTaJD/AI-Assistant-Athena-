"""
Advanced Development Runner
Use this for development and testing of the advanced AI assistant
"""
import sys
import os
import subprocess
from pathlib import Path

# Add current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def check_advanced_dependencies():
    """Check if all advanced dependencies are installed"""
    print("üîç Checking Advanced Dependencies...")
    
    required_modules = {
        'customtkinter': 'Modern GUI framework',
        'pyttsx3': 'Text-to-speech engine',
        'speech_recognition': 'Voice recognition',
        'PIL': 'Image processing (Pillow)',
        'bcrypt': 'Password hashing',
        'psutil': 'System monitoring',
        'numpy': 'Numerical computing',
        'webrtcvad': 'Voice activity detection',
        'pyaudio': 'Audio input/output'
    }
    
    missing_modules = []
    available_modules = []
    
    for module, description in required_modules.items():
        try:
            __import__(module)
            available_modules.append((module, description))
            print(f"‚úÖ {module} - {description}")
        except ImportError:
            missing_modules.append((module, description))
            print(f"‚ùå {module} - {description} - MISSING")
    
    print(f"\nüìä Status: {len(available_modules)}/{len(required_modules)} modules available")
    
    if missing_modules:
        print("\n‚ùå Missing required modules:")
        for module, description in missing_modules:
            print(f"  - {module}: {description}")
        print("\nüí° Install missing modules with:")
        print("pip install -r requirements_advanced.txt")
        
        # Platform-specific instructions
        print("\nüîß Platform-specific setup:")
        if sys.platform == "win32":
            print("Windows: pip install pipwin && pipwin install pyaudio")
        elif sys.platform == "darwin":
            print("macOS: brew install portaudio && pip install pyaudio")
        else:
            print("Linux: sudo apt-get install python3-pyaudio portaudio19-dev")
        
        return False
    
    return True

def check_system_requirements():
    """Check system requirements for advanced features"""
    print("\nüñ•Ô∏è Checking System Requirements...")
    
    # Check Python version
    if sys.version_info < (3, 8):
        print(f"‚ùå Python 3.8+ required. Current: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version}")
    
    # Check available memory
    try:
        import psutil
        memory = psutil.virtual_memory()
        memory_gb = memory.total / (1024**3)
        
        if memory_gb < 2:
            print(f"‚ö†Ô∏è Low memory: {memory_gb:.1f}GB (4GB+ recommended)")
        else:
            print(f"‚úÖ System memory: {memory_gb:.1f}GB")
    except ImportError:
        print("‚ö†Ô∏è Cannot check system memory (psutil not available)")
    
    # Check audio system
    try:
        import pyaudio
        p = pyaudio.PyAudio()
        device_count = p.get_device_count()
        p.terminate()
        
        if device_count == 0:
            print("‚ùå No audio devices found")
            return False
        else:
            print(f"‚úÖ Audio devices: {device_count} available")
    except ImportError:
        print("‚ö†Ô∏è Cannot check audio system (pyaudio not available)")
    except Exception as e:
        print(f"‚ö†Ô∏è Audio system check failed: {e}")
    
    return True

def install_dependencies():
    """Install missing dependencies"""
    print("\nüì¶ Installing Advanced Dependencies...")
    
    try:
        # Install from requirements file
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", 
            "-r", "requirements_advanced.txt"
        ])
        print("‚úÖ Dependencies installed successfully!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå requirements_advanced.txt not found")
        return False

def run_application():
    """Run the advanced AI assistant application"""
    print("\nüöÄ Starting Advanced AI Assistant...")
    
    try:
        from enhanced_main import main
        main()
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("Please ensure all dependencies are installed")
        return False
    except Exception as e:
        print(f"‚ùå Application error: {e}")
        return False
    
    return True

def show_feature_overview():
    """Show overview of advanced features"""
    features = """
üöÄ ADVANCED AI ASSISTANT FEATURES
{'='*50}

üé§ ROOM-SCALE VOICE RECOGNITION
‚Ä¢ Advanced noise filtering and voice activity detection
‚Ä¢ Wake word detection from across the room
‚Ä¢ Natural language processing with context awareness
‚Ä¢ Continuous listening with low CPU usage

ü§ñ 3D ANIMATED AVATAR
‚Ä¢ Real-time facial expressions and animations
‚Ä¢ Speaking and listening visual feedback
‚Ä¢ Customizable appearance and personality
‚Ä¢ Smooth transitions and micro-interactions

üìÅ SMART FILE MANAGEMENT
‚Ä¢ Natural language file operations
‚Ä¢ "Open my resume from Documents"
‚Ä¢ "Find all photos from last month"
‚Ä¢ Recursive search with intelligent suggestions

üñ•Ô∏è REAL-TIME SYSTEM MONITORING
‚Ä¢ CPU, memory, and disk usage tracking
‚Ä¢ Network status and performance metrics
‚Ä¢ Running processes overview
‚Ä¢ System health alerts and notifications

üß† ADVANCED AI CAPABILITIES
‚Ä¢ Context-aware conversation memory
‚Ä¢ Learning from user preferences
‚Ä¢ Complex multi-step task execution
‚Ä¢ Intelligent response generation

üîí PRIVACY & SECURITY
‚Ä¢ Offline-first architecture
‚Ä¢ Local data storage only
‚Ä¢ Encrypted password storage
‚Ä¢ No telemetry or tracking

‚ö° PERFORMANCE OPTIMIZED
‚Ä¢ Efficient resource usage
‚Ä¢ Fast response times
‚Ä¢ Optimized for long-running sessions
‚Ä¢ Minimal system impact
"""
    print(features)

def main():
    """Main development runner"""
    print("ü§ñ Advanced AI Assistant - Development Mode")
    print("=" * 60)
    
    # Show feature overview
    show_feature_overview()
    
    # Check system requirements
    if not check_system_requirements():
        print("\n‚ùå System requirements not met")
        input("Press Enter to continue anyway or Ctrl+C to exit...")
    
    # Check dependencies
    if not check_advanced_dependencies():
        print("\n‚ùì Install missing dependencies? (y/n): ", end="")
        if input().lower().startswith('y'):
            if not install_dependencies():
                print("‚ùå Dependency installation failed")
                input("Press Enter to exit...")
                sys.exit(1)
            print("‚úÖ Dependencies installed. Please restart the application.")
            input("Press Enter to exit...")
            sys.exit(0)
        else:
            print("‚ö†Ô∏è Running with missing dependencies - some features may not work")
            input("Press Enter to continue...")
    
    print("\n‚úÖ All checks passed!")
    print("üîÑ Starting Advanced AI Assistant...")
    
    # Run the application
    try:
        run_application()
    except KeyboardInterrupt:
        print("\nüëã Application stopped by user")
    except Exception as e:
        print(f"\n‚ùå Critical error: {e}")
        input("Press Enter to exit...")

if __name__ == "__main__":
    main()